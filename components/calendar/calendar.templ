package calendar

import (
	"fmt"
    "time"
	"github.com/Depado/pb-templ-htmx-tailwind/services"
	"github.com/Depado/pb-templ-htmx-tailwind/services/di"
)

type Context struct {
	DayEntries []services.CalendarWindowDayEntry
    FirstOfCurrMonth time.Time
}

const (
    cardBaseClass = `relative flex flex-col justify-center items-center
                     w-full h-24 rounded-lg bg-base-100
                     transition transform hover:-translate-y-1 hover:shadow-lg
                     hover:cursor-pointer hover:bg-primary-content`
    cardBorderClass = "border border-primary-content"
    cardBorderTodayClass = "border-2 border-primary"
    cardOtherClass = `relative flex flex-col justify-center items-center
                      w-full h-24
                      border border-neutral rounded-lg bg-neutral-content
                      transition transform hover:-translate-y-1 hover:shadow-lg
                      hover:cursor-pointer hover:bg-secondary-content`
)

func getCalCardClass(isThisMonth bool, isToday bool) string {
    if !isThisMonth {
        return cardOtherClass
    }

    if isToday {
        return cardBaseClass + " " + cardBorderTodayClass
    } else {
        return cardBaseClass + " " + cardBorderClass
    }
}

func getCalDayNumberClass(isThisMonth bool) string {
    const baseClass = `
        absolute top-0 left-0 w-3ch h-fit
        flex items-center justify-center
        rounded-tl-lg rounded-br-lg shadow-inner
        text-xs p-1 text-gray-800
    `

    const thisMonthBackground = "bg-neutral-content"
    const otherMonthBackground = "bg-base-100"

    if isThisMonth {
        return baseClass + " " + thisMonthBackground
    } else {
        return baseClass + " " + otherMonthBackground
    }
}

templ CalCardHeader(day services.CalendarWindowDayEntry) {
<div class="w-full flex justify-between items-center px-2">
			<time
				class={ getCalDayNumberClass(day.IsThisMonth) }
				datetime={ day.Day.DateString }
			>
				{ fmt.Sprintf("%d", day.Day.Date) }
			</time>
            <time class="dummy">7</time>
            if day.IsToday {
                <div class="top-0 h-fit flex items-center justify-center">Dnes</div>
            }
            <span class="text-s text-gray-500">3 events</span>
</div>
}

templ CalCardBody(day services.CalendarWindowDayEntry) {
<div class="w-full flex flex-col justify-start items-start mt-1 overflow-hidden">
    <div class=" overflow-hidden w-full">
      <div class="bg-gradient-to-r from-primary via-secondary to-info text-primary-content w-full min-h-fit p-1 mb-1 mx-auto rounded-sm">Babysitting</div>
      <div class="bg-secondary text-secondary-content w-full min-h-fit p-1 mb-1 mx-auto rounded-sm">Cooking Class</div>
      <div class="bg-accent w-full min-h-fit p-1 mb-1 mx-auto rounded-sm">Yoga</div>
    </div>
  </div>
}

templ CalendarDayCard(day services.CalendarWindowDayEntry) {
    <div class={ getCalCardClass(day.IsThisMonth, day.IsToday) }>
            @CalCardHeader(day)
            @CalCardBody(day)
    </div>
}

templ Calendar(c Context) {
	<div class="p-6 w-full" id="calendar-container">
		<div class="card card-compact h-full bg-white">
			<div class="card-body flex justify-between">
            <!-- Navigation Row for Month, Year, and Arrows -->
				<div class="flex justify-between items-center mb-4">
					<!-- Left Arrow -->
					<button
						class="p-2 rounded-full hover:bg-gray-200 transition"
						hx-get={
                            fmt.Sprintf("/calendar/prevMonth/%s", di.Instance().CalendarProvider.Format(c.FirstOfCurrMonth)),
                        }
						hx-target="#calendar-container"
                        hx-swap="outerHTML"
					>
						<!-- Icon or simple text for left arrow -->
						&larr;
					</button>

					<!-- Current Month and Year -->
					<div class="text-xl font-semibold">
						{ fmt.Sprintf("%s %d", c.FirstOfCurrMonth.Month(), c.FirstOfCurrMonth.Year()) }
					</div>

					<!-- Right Arrow -->
					<button
						class="p-2 rounded-full hover:bg-gray-200 transition"
						hx-get={
                            fmt.Sprintf("/calendar/nextMonth/%s", di.Instance().CalendarProvider.Format(c.FirstOfCurrMonth)),
                        }
						hx-target="#calendar-container"
                        hx-swap="outerHTML"
					>
						<!-- Icon or simple text for right arrow -->
						&rarr;
					</button>
				</div>
				<div class="grid grid-cols-7 gap-1">
					<!-- Header for days of the week -->
					<div class="text-center font-semibold">Mon</div>
					<div class="text-center font-semibold">Tue</div>
					<div class="text-center font-semibold">Wed</div>
					<div class="text-center font-semibold">Thu</div>
					<div class="text-center font-semibold">Fri</div>
					<div class="text-center font-semibold">Sat</div>
					<div class="text-center font-semibold">Sun</div>
					for _, day := range c.DayEntries {
						@CalendarDayCard(day)
					}
				</div>
			</div>
		</div>
	</div>
}
