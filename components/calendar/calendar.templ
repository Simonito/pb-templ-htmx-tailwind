package calendar

import (
	"fmt"
    "time"
	"github.com/Depado/pb-templ-htmx-tailwind/services"
	"github.com/Depado/pb-templ-htmx-tailwind/services/di"
)

type Context struct {
	DayEntries []services.CalendarWindowDayEntry
    FirstOfCurrMonth time.Time
}

templ CalendarDayCard(day services.CalendarWindowDayEntry) {
	if day.IsThisMonth {
		<div
			class="relative flex justify-center items-center
                w-full h-24
                border border-gray-200 rounded-lg bg-white
                transition transform hover:-translate-y-1 hover:shadow-lg
                hover:cursor-pointer hover:bg-gray-100"
		>
			<time
				class="absolute top-0 left-0 w-3ch h-fit
                    flex items-center justify-center
                    bg-gray-100 rounded-tl-lg rounded-br-lg shadow-inner
                    text-xs p-1 text-gray-800"
				datetime={ day.Day.DateString }
			>
				{ fmt.Sprintf("%d", day.Day.Date) }
			</time>
            <div class="absolute top-0 h-fit flex items-center justify-center">
                if day.IsToday {
                    { fmt.Sprintf("Dnes") }
                }
            </div>
		</div>
	} else {
		<div
			class="relative flex justify-center items-center
                w-full h-24
                border border-gray-200 rounded-lg bg-gray-50
                transition transform hover:-translate-y-1 hover:shadow-lg
                hover:cursor-pointer hover:bg-gray-100"
		>
			<time
				class="absolute top-0 left-0 w-3ch h-fit
                    flex items-center justify-center
                    bg-gray-100 rounded-tl-lg rounded-br-lg shadow-inner
                    text-xs p-1 text-gray-400"
				datetime={ day.Day.DateString }
			>
				{ fmt.Sprintf("%d", day.Day.Date) }
			</time>
		</div>
	}
}

templ Calendar(c Context) {
	<div class="p-6 w-full" id="calendar-container">
		<div class="card card-compact h-full bg-white">
			<div class="card-body flex justify-between">
            <!-- Navigation Row for Month, Year, and Arrows -->
				<div class="flex justify-between items-center mb-4">
					<!-- Left Arrow -->
					<button
						class="p-2 rounded-full hover:bg-gray-200 transition"
						hx-get={
                            fmt.Sprintf("/calendar/prevMonth/%s", di.Instance().CalendarProvider.Format(c.FirstOfCurrMonth)),
                        }
						hx-target="#calendar-container"
                        hx-swap="outerHTML"
					>
						<!-- Icon or simple text for left arrow -->
						&larr;
					</button>

					<!-- Current Month and Year -->
					<div class="text-xl font-semibold">
						{ fmt.Sprintf("%s %d", c.FirstOfCurrMonth.Month(), c.FirstOfCurrMonth.Year()) }
					</div>

					<!-- Right Arrow -->
					<button
						class="p-2 rounded-full hover:bg-gray-200 transition"
						hx-get={
                            fmt.Sprintf("/calendar/nextMonth/%s", di.Instance().CalendarProvider.Format(c.FirstOfCurrMonth)),
                        }
						hx-target="#calendar-container"
                        hx-swap="outerHTML"
					>
						<!-- Icon or simple text for right arrow -->
						&rarr;
					</button>
				</div>
				<div class="grid grid-cols-7 gap-1">
					<!-- Header for days of the week -->
					<div class="text-center font-semibold">Mon</div>
					<div class="text-center font-semibold">Tue</div>
					<div class="text-center font-semibold">Wed</div>
					<div class="text-center font-semibold">Thu</div>
					<div class="text-center font-semibold">Fri</div>
					<div class="text-center font-semibold">Sat</div>
					<div class="text-center font-semibold">Sun</div>
					for _, day := range c.DayEntries {
						@CalendarDayCard(day)
					}
				</div>
			</div>
		</div>
	</div>
}
